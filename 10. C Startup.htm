<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns:t="http://nwalsh.com/docbook/xsl/template/1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:hl="http://xslthl.sf.net"><head>
<meta name="generator" content="HTML Tidy for Linux/x86 (vers 25 March 2009), see www.w3.org">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>10.&nbsp;C Startup</title>
<link rel="stylesheet" href="10.%C2%A0C%20Startup_files/style.css" type="text/css">
<meta name="generator" content="DocBook XSL Stylesheets V1.75.2">
<link rel="home" href="http://bravegnu.org/gnu-eprog/index.html" title="Embedded Programming with the GNU Toolchain">
<link rel="up" href="http://bravegnu.org/gnu-eprog/index.html" title="Embedded Programming with the GNU Toolchain">
<link rel="prev" href="http://bravegnu.org/gnu-eprog/exc-handle.html" title="9.&nbsp;Exception Handling">
<link rel="next" href="http://bravegnu.org/gnu-eprog/c-library.html" title="11.&nbsp;Using the C Library">
<link href="http://bravegnu.org/gnu-eprog/revision.rss" type="application/rss+xml" rel="alternate" title="Revision updates">
</head>
<body vlink="#840084" text="black" link="#0000FF" bgcolor="white" alink="#0000FF">
<div class="body"><span id="forkongithub"><a href="https://github.com/bravegnu/gnu-eprog">Fork me on
GitHub</a></span>
<div class="navheader">
<table summary="Navigation header" width="100%">
<tbody><tr>
<th colspan="3" align="center">10.&nbsp;C Startup</th>
</tr>
<tr>
<td width="20%" align="left"><a accesskey="p" href="http://bravegnu.org/gnu-eprog/exc-handle.html"><img src="10.%C2%A0C%20Startup_files/prev.png" alt="Prev" width="48" height="48"></a>&nbsp;</td>
<th width="60%" align="center">&nbsp;</th>
<td width="20%" align="right">&nbsp;<a accesskey="n" href="http://bravegnu.org/gnu-eprog/c-library.html"><img src="10.%C2%A0C%20Startup_files/next.png" alt="Next" width="48" height="48"></a></td>
</tr>
</tbody></table>
<hr></div>
<div class="section" title="10.&nbsp;C Startup">
<div class="titlepage">
<div>
<div>
<h2 class="title" style="clear: both"><a name="c-startup" id="c-startup"></a>10.&nbsp;C Startup</h2>
</div>
</div>
</div>
<p>It is not possible to directly execute C code, when the
processor comes out of reset. Since, unlike assembly language, C
programs need some basic pre-requisites to be satisfied. This
section will describe the pre-requisites and how to meet the
pre-requisites.</p>
<p>We will take the example of C program that calculates the sum of
an array as an example. And by the end of this section, we will be
able to perform the necessary setup, transfer control to the C code
and execute it.</p>
<div class="example"><a name="csum" id="csum"></a>
<p class="title"><b>Listing&nbsp;12.&nbsp;Sum of Array in C</b></p>
<div class="example-contents">
<pre class="programlisting"><code class="c"><b class="hl-keyword">static</b> <b class="hl-keyword">int</b> arr[] = { <span class="hl-number">1</span>, <span class="hl-number">10</span>, <span class="hl-number">4</span>, <span class="hl-number">5</span>, <span class="hl-number">6</span>, <span class="hl-number">7</span> };
<b class="hl-keyword">static</b> <b class="hl-keyword">int</b> sum;
<b class="hl-keyword">static</b> <b class="hl-keyword">const</b> <b class="hl-keyword">int</b> n = <b class="hl-keyword">sizeof</b>(arr) / <b class="hl-keyword">sizeof</b>(arr[<span class="hl-number">0</span>]);

<b class="hl-keyword">int</b> main()
{
        <b class="hl-keyword">int</b> i;

        <b class="hl-keyword">for</b> (i = <span class="hl-number">0</span>; i &lt; n; i++)
                sum += arr[i];
}</code>
</pre></div>
</div>
<br class="example-break">
<p>Before transferring control to C code, the following have to be
setup correctly.</p>
<div class="orderedlist">
<ol class="orderedlist" type="1">
<li class="listitem">Stack</li>
<li class="listitem">
<p class="simpara">Global variables</p>
<div class="orderedlist">
<ol class="orderedlist" type="a">
<li class="listitem">Initialized</li>
<li class="listitem">Uninitialized</li>
</ol>
</div>
</li>
<li class="listitem">Read-only data</li>
</ol>
</div>
<div class="section" title="10.1.&nbsp;Stack">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a name="_stack"></a>10.1.&nbsp;Stack</h3>
</div>
</div>
</div>
<p>C uses the stack for storing local (auto) variables, passing
function arguments, storing return address, etc. So it is essential
that the stack be setup correctly, before transferring control to C
code.</p>
<p>Stacks are highly flexible in the ARM architecture, since the
implementation is completely left to the software. For people not
familiar with the ARM architecture a overview is provided in
<a class="xref" href="http://bravegnu.org/gnu-eprog/arm-stacks.html" title="C.&nbsp;ARM Stacks">Appendix&nbsp;C, <i>ARM Stacks</i></a>.</p>
<p>To make sure that code generated by different compilers is
interroperable, ARM has created the <a class="ulink" href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042a/IHI0042A_aapcs.pdf" target="_top">ARM Architecture Procedure Call Standard (AAPCS)</a>.
The register to be used as the stack pointer and the direction in
which the stack grows is all dictated by the AAPCS. According to
the AAPCS, <span class="strong"><strong>register <code class="literal">r13</code></strong></span> is to be used as the stack
pointer. Also the stack should be <span class="strong"><strong>full-descending</strong></span>.</p>
<p>One way of placing global variables and the stack is shown in
the following diagram.</p>
<div class="figure"><a name="d0e1553" id="d0e1553"></a>
<p class="title"><b>Figure&nbsp;5.&nbsp;Stack Placement</b></p>
<div class="figure-contents">
<div class="mediaobject"><img src="10.%C2%A0C%20Startup_files/stack.png" alt="stack.png"></div>
</div>
</div>
<br class="figure-break">
<p>So all that has to be done in the startup code is to point
<code class="literal">r13</code> at the highest RAM address, so
that the stack can grow downwards (towards lower addresses). For
the <code class="literal">connex</code> board this can be acheived
using the following ARM instruction.</p>
<pre class="programlisting"><code class="no-highlight">        ldr sp, =0xA4000000</code>
</pre>
<p>Note that the the assembler provides an alias <code class="literal">sp</code> for the <code class="literal">r13</code>
register.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;">
<table summary="Note" border="0">
<tbody><tr>
<td rowspan="2" width="25" valign="top" align="center"><img alt="[Note]" src="10.%C2%A0C%20Startup_files/note.png" width="64" height="64"></td>
<th align="left">Note</th>
</tr>
<tr>
<td valign="top" align="left">
<p>The address <code class="literal">0xA4000000</code> itself does
not correspond to RAM. The RAM ends at <code class="literal">0xA3FFFFFF</code>. But that is OK, since the stack is
<span class="strong"><strong>full</strong></span>-descending,
during the first push the stack pointer will be decremented first
and the value will be stored.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="section" title="10.2.&nbsp;Global Variables">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a name="_global_variables"></a>10.2.&nbsp;Global
Variables</h3>
</div>
</div>
</div>
<p>When C code is compiled, the compiler places initialized global
variables in the <code class="literal">.data</code> section. So
just as with the assembly, the <code class="literal">.data</code>
has to be copied from Flash to RAM.</p>
<p>The C language guarantees that all uninitialized global
variables will be initialized to zero. When C programs are
compiled, a separate section called <code class="literal">.bss</code> is used for uninitialized variables. Since
the value of these variables are all zeroes to start with, they do
not have to be stored in Flash. Before transferring control to C
code, the memory locations corresponding to these variables have to
be initialized to zero.</p>
</div>
<div class="section" title="10.3.&nbsp;Read-only Data">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a name="_read_only_data"></a>10.3.&nbsp;Read-only Data</h3>
</div>
</div>
</div>
<p>GCC places global variables marked as <code class="literal">const</code> in a separate section, called <code class="literal">.rodata</code>. The <code class="literal">.rodata</code>
is also used for storing string constants.</p>
<p>Since contents of <code class="literal">.rodata</code> section
will not be modified, they can be placed in Flash. The linker
script has to modified to accomodate this.</p>
</div>
<div class="section" title="10.4.&nbsp;Startup Code">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a name="_startup_code"></a>10.4.&nbsp;Startup
Code</h3>
</div>
</div>
</div>
<p>Now that we know the pre-requisites we can create the linker
script and the startup code. The linker script <a class="xref" href="http://bravegnu.org/gnu-eprog/data-in-ram.html#linker2" title="Listing&nbsp;10.&nbsp;Linker Script with Section Copy Symbols">Listing&nbsp;10,
“Linker Script with Section Copy Symbols”</a> is
modified to accomodate the following.</p>
<div class="orderedlist">
<ol class="orderedlist" type="1">
<li class="listitem"><code class="literal">.bss</code> section
placement</li>
<li class="listitem"><code class="literal">vectors</code> section
placement</li>
<li class="listitem"><code class="literal">.rodata</code> section
placement</li>
</ol>
</div>
<p>The <code class="literal">.bss</code> is placed right after
<code class="literal">.data</code> section in RAM. Symbols to
locate the start of <code class="literal">.bss</code> and end of
<code class="literal">.bss</code> are also created in the linker
script. The <code class="literal">.rodata</code> is placed right
after <code class="literal">.text</code> section in Flash. The
following diagram shows the placement of the various sections.</p>
<div class="figure"><a name="d0e1673" id="d0e1673"></a>
<p class="title"><b>Figure&nbsp;6.&nbsp;Section Placement</b></p>
<div class="figure-contents">
<div class="mediaobject"><img src="10.%C2%A0C%20Startup_files/csections.png" alt="csections.png"></div>
</div>
</div>
<br class="figure-break">
<div class="example"><a name="d0e1682" id="d0e1682"></a>
<p class="title"><b>Listing&nbsp;13.&nbsp;Linker Script for C
code</b></p>
<div class="example-contents">
<pre class="programlisting"><code class="no-highlight">SECTIONS {
        . = 0x00000000;
        .text : {
              * (vectors);
              * (.text);
        }
        .rodata : {
              * (.rodata);
        }
        flash_sdata = .;

        . = 0xA0000000;
        ram_sdata = .;
        .data : AT (flash_sdata) {
              * (.data);
        }
        ram_edata = .;
        data_size = ram_edata - ram_sdata;

        sbss = .;
        .bss : {
             * (.bss);
        }
        ebss = .;
        bss_size = ebss - sbss;
}</code>
</pre></div>
</div>
<br class="example-break">
<p>The startup code has the following parts</p>
<div class="orderedlist">
<ol class="orderedlist" type="1">
<li class="listitem">exception vectors</li>
<li class="listitem">code to copy the <code class="literal">.data</code> from Flash to RAM</li>
<li class="listitem">code to zero out the <code class="literal">.bss</code></li>
<li class="listitem">code to setup the stack pointer</li>
<li class="listitem">branch to main</li>
</ol>
</div>
<div class="example"><a name="d0e1711" id="d0e1711"></a>
<p class="title"><b>Listing&nbsp;14.&nbsp;C Startup
Assembly</b></p>
<div class="example-contents">
<pre class="programlisting"><code class="armasm">        .section <b class="hl-string"><i style="color:red">"vectors"</i></b>
<b class="hl-keyword">reset:</b>  b     start
<b class="hl-keyword">undef:</b>  b     undef
<b class="hl-keyword">swi:</b>    b     swi
<b class="hl-keyword">pabt:</b>   b     pabt
<b class="hl-keyword">dabt:</b>   b     dabt
        nop
<b class="hl-keyword">irq:</b>    b     irq
<b class="hl-keyword">fiq:</b>    b     fiq

        .<span class="hl-directive" style="color: maroon">text</span>
<b class="hl-keyword">start:</b>
        <i class="hl-comment" style="color: #888">@@ Copy data to RAM.</i>
        ldr   r0, =flash_sdata
        ldr   r1, =ram_sdata
        ldr   r2, =data_size

        <i class="hl-comment" style="color: #888">@@ Handle data_size == 0</i>
        cmp   r2, <span class="hl-number">#0</span>
        beq   init_bss
<b class="hl-keyword">copy:</b>
        ldrb   r4, [r0], <span class="hl-number">#1</span>
        strb   r4, [r1], <span class="hl-number">#1</span>
        subs   r2, r2, <span class="hl-number">#1</span>
        bne    copy

<b class="hl-keyword">init_bss:</b>
        <i class="hl-comment" style="color: #888">@@ Initialize .bss</i>
        ldr   r0, =sbss
        ldr   r1, =ebss
        ldr   r2, =bss_size

        <i class="hl-comment" style="color: #888">@@ Handle bss_size == 0</i>
        cmp   r2, <span class="hl-number">#0</span>
        beq   init_stack

        mov   r4, <span class="hl-number">#0</span>
<b class="hl-keyword">zero:</b>
        strb  r4, [r0], <span class="hl-number">#1</span>
        subs  r2, r2, <span class="hl-number">#1</span>
        bne   zero

<b class="hl-keyword">init_stack:</b>
        <i class="hl-comment" style="color: #888">@@ Initialize the stack pointer</i>
        ldr   sp, =<span class="hl-number">0xA4000000</span>

        bl    main

<b class="hl-keyword">stop:</b>   b     stop</code>
</pre></div>
</div>
<br class="example-break">
<p>To compile the code, it is not necessary to invoke the
assembler, compiler and linker individually. <code class="literal">gcc</code> is intelligent enough to do that for us.</p>
<p>As promised before, we will compile and execute the C code shown
in <a class="xref" href="http://bravegnu.org/gnu-eprog/c-startup.html#csum" title="Listing&nbsp;12.&nbsp;Sum of Array in C">Listing&nbsp;12,
“Sum of Array in C”</a>.</p>
<pre class="programlisting"><code class="no-highlight">$ arm-none-eabi-gcc -nostdlib -o csum.elf -T csum.lds csum.c startup.s</code>
</pre>
<p>The <code class="literal">-nostdlib</code> option is used to
specify that the standard C library should not be linked in. A
little extra care has to be taken when the C library is linked in.
This is discussed in <a class="xref" href="http://bravegnu.org/gnu-eprog/c-library.html" title="11.&nbsp;Using the C Library">Section&nbsp;11, “Using the C
Library”</a>.</p>
<p>A dump of the symbol table will give a better picture of how
things have been placed in memory.</p>
<pre class="programlisting"><code class="no-highlight">$ arm-none-eabi-nm -n csum.elf
00000000 t reset        <a name="CO6-1" id="CO6-1"></a>&#10102;
00000004 A bss_size
00000004 t undef
00000008 t swi
0000000c t pabt
00000010 t dabt
00000018 A data_size
00000018 t irq
0000001c t fiq
00000020 T main
00000090 t start        <a name="CO6-2" id="CO6-2"></a>&#10103;
000000a0 t copy
000000b0 t init_bss
000000c4 t zero
000000d0 t init_stack
000000d8 t stop
000000f4 r n            <a name="CO6-3" id="CO6-3"></a>&#10104;
000000f8 A flash_sdata
a0000000 d arr          <a name="CO6-4" id="CO6-4"></a>&#10105;
a0000000 A ram_sdata
a0000018 A ram_edata
a0000018 A sbss
a0000018 b sum          <a name="CO6-5" id="CO6-5"></a>&#10106;
a000001c A ebss</code>
</pre>
<div class="calloutlist">
<table summary="Callout list" border="0">
<tbody><tr>
<td width="5%" valign="top" align="left">
<p><a href="#CO6-1">&#10102;</a></p>
</td>
<td valign="top" align="left"><code class="literal">reset</code>
and the rest of the exception vectors are placed starting from
<code class="literal">0x0</code>.</td>
</tr>
<tr>
<td width="5%" valign="top" align="left">
<p><a href="#CO6-2">&#10103;</a></p>
</td>
<td valign="top" align="left">The assembly code is placed right
after the 8 exception vectors (<code class="literal">8 * 4 = 32 =
0x20</code>).</td>
</tr>
<tr>
<td width="5%" valign="top" align="left">
<p><a href="#CO6-3">&#10104;</a></p>
</td>
<td valign="top" align="left">The read-only data <code class="literal">n</code>, is placed in Flash after the code.</td>
</tr>
<tr>
<td width="5%" valign="top" align="left">
<p><a href="#CO6-4">&#10105;</a></p>
</td>
<td valign="top" align="left">The initialized data <code class="literal">arr</code>, an array of 6 integers, is placed at the
start of RAM <code class="literal">0xA0000000</code>.</td>
</tr>
<tr>
<td width="5%" valign="top" align="left">
<p><a href="#CO6-5">&#10106;</a></p>
</td>
<td valign="top" align="left">The uninitialized data <code class="literal">sum</code> is placed after the array of 6 integers.
(<code class="literal">6 * 4 = 24 = 0x18</code>)</td>
</tr>
</tbody></table>
</div>
<p>To execute the program, convert the program to <code class="literal">.bin</code> format, execute in Qemu, and dump the
<code class="literal">sum</code> variable located at <code class="literal">0xA0000018</code>.</p>
<pre class="programlisting"><code class="no-highlight">$ arm-none-eabi-objcopy -O binary csum.elf csum.bin
$ dd if=csum.bin of=flash.bin bs=4096 conv=notrunc
$ qemu-system-arm -M connex -pflash flash.bin -nographic -serial /dev/null
(qemu) xp /6dw 0xa0000000
a0000000:          1         10          4          5
a0000010:          6          7
(qemu) xp /1dw 0xa0000018
a0000018:         33</code>
</pre></div>
</div>
<div class="navfooter">
<hr>
<table summary="Navigation footer" width="100%">
<tbody><tr>
<td width="40%" align="left"><a accesskey="p" href="http://bravegnu.org/gnu-eprog/exc-handle.html"><img src="10.%C2%A0C%20Startup_files/prev.png" alt="Prev" width="48" height="48"></a>&nbsp;</td>
<td width="20%" align="center">&nbsp;</td>
<td width="40%" align="right">&nbsp;<a accesskey="n" href="http://bravegnu.org/gnu-eprog/c-library.html"><img src="10.%C2%A0C%20Startup_files/next.png" alt="Next" width="48" height="48"></a></td>
</tr>
<tr>
<td width="40%" valign="top" align="left">9.&nbsp;Exception
Handling&nbsp;</td>
<td width="20%" align="center"><a accesskey="h" href="http://bravegnu.org/gnu-eprog/index.html"><img src="10.%C2%A0C%20Startup_files/home.png" alt="Home" width="48" height="48"></a></td>
<td width="40%" valign="top" align="right">&nbsp;11.&nbsp;Using the
C Library</td>
</tr>
</tbody></table>
</div>
</div>


</body></html>